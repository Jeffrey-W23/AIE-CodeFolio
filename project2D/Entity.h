// #include, using, etc
#pragma once

//--------------------------------------------------------------------------------------
// Dirt object.
//--------------------------------------------------------------------------------------
class Entity
{
public:

	//--------------------------------------------------------------------------------------
	// Default Constructor.
	//--------------------------------------------------------------------------------------
	Entity();

	//--------------------------------------------------------------------------------------
	// Default Destructor
	//--------------------------------------------------------------------------------------
	~Entity();

	//--------------------------------------------------------------------------------------
	// SetActive: A function to set the object to active for the object pool
	//
	// Param:
	//		m_bActive: a bool for if you want the object to be active or not.
	//--------------------------------------------------------------------------------------
	void SetActive(bool m_bActive);

	//--------------------------------------------------------------------------------------
	// GetActive: A function to check if an object is active or not for the object pool.
	//--------------------------------------------------------------------------------------
	bool GetActive();

	//--------------------------------------------------------------------------------------
	// Update: A function to update objects.
	//
	// Param:
	//		deltaTime: Pass in deltaTime. A number that updates per second.
	//--------------------------------------------------------------------------------------
	void Update();
	
	//--------------------------------------------------------------------------------------
	// Draw: A function to render (or "draw") objects to the screen.
	//
	// Param:
	//		renderer2D: a pointer to Renderer2D for rendering objects to screen.
	//--------------------------------------------------------------------------------------
	void Draw();

private:

	//--------------------------------------------------------------------------------------
	// A bool m_bActive for setting object active or unactive.
	//--------------------------------------------------------------------------------------
	bool m_bActive;
	
	//--------------------------------------------------------------------------------------
	// A float m_x for the x position of the object 
	//--------------------------------------------------------------------------------------
	float m_x;

	//--------------------------------------------------------------------------------------
	// A float m_y for the y position of the object 
	//--------------------------------------------------------------------------------------
	float m_y;

	//--------------------------------------------------------------------------------------
	// A float m_rot for the rotation of the dir object.
	//--------------------------------------------------------------------------------------
	float m_rot;
};