// #include, using, etc
#pragma once
#include "IBehaviour.h"
#include "AStarNode.h"
#include "Grid.h"

//--------------------------------------------------------------------------------------
// Follow object. Inheritance from IBehaviour.
//--------------------------------------------------------------------------------------
class Follow : public IBehaviour
{
public:
	
	//--------------------------------------------------------------------------------------
	// Default Constructor. Taking in a int fWeighting, an int for the start node and end.
	//--------------------------------------------------------------------------------------
	Follow(float fWeighting, int nStart, int nEnd);
	
	//--------------------------------------------------------------------------------------
	// Default Destructor
	//--------------------------------------------------------------------------------------
	~Follow();

	//--------------------------------------------------------------------------------------
	// Update: A virtual function from IBehaviour to update objects over time.
	//
	// Param:
	//		deltaTime: Pass in deltaTime. A number that updates per second.
	//		pEntity: a pointer to an entity.
	//--------------------------------------------------------------------------------------
	Vector2 Update(Entity* pEntity, float deltaTime);

protected:
	
	//--------------------------------------------------------------------------------------
	// A Grid pointer.
	//--------------------------------------------------------------------------------------
	Grid* m_pGrid;
	
	//--------------------------------------------------------------------------------------
	// A AStar pointer.
	//--------------------------------------------------------------------------------------
	AStar* m_pAStar;
	
	//--------------------------------------------------------------------------------------
	// A DynamicArray of AStarNode pointers.
	//--------------------------------------------------------------------------------------
	DynamicArray<AStarNode*> m_path;
	
	//--------------------------------------------------------------------------------------
	// int for the next node.
	//--------------------------------------------------------------------------------------
	int m_NextNode;
	
	//--------------------------------------------------------------------------------------
	// int for the start node.
	//--------------------------------------------------------------------------------------
	int m_nStart;
	
	//--------------------------------------------------------------------------------------
	// int for the last node.
	//--------------------------------------------------------------------------------------
	int m_nEnd;
};